{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { categoryConstants } from \"../actions/constants\";\nconst initState = {\n  categories: [],\n  loading: false,\n  error: null\n};\n\nconst buildNewCategories = (parentId, categories, category) => {\n  let myCategories = [];\n\n  if (parentId == undefined) {\n    return [...categories, {\n      _id: category._id,\n      name: category.name,\n      slug: category.slug,\n      children: []\n    }];\n  }\n\n  for (let cat of categories) {\n    if (cat._id == parentId) {\n      myCategories.push(_objectSpread(_objectSpread({}, cat), {}, {\n        children: cat.children ? buildNewCategories(parentId, [...cat.children, {\n          _id: category._id,\n          name: category.name,\n          slug: category.slug,\n          parentId: category.parentId,\n          children: category.children\n        }], category) : []\n      }));\n    } else {\n      myCategories.push(_objectSpread(_objectSpread({}, cat), {}, {\n        children: cat.children ? buildNewCategories(parentId, cat.children, category) : []\n      }));\n    }\n  }\n\n  return myCategories;\n};\n\nexport default ((state = initState, action) => {\n  switch (action.type) {\n    case categoryConstants.GET_CATEGORIES_SUCCESS:\n      state = _objectSpread(_objectSpread({}, state), {}, {\n        categories: action.payload.categories\n      });\n      break;\n\n    case categoryConstants.ADD_NEW_CATEGORY_REQUEST:\n      state = _objectSpread(_objectSpread({}, state), {}, {\n        loading: true\n      });\n      break;\n\n    case categoryConstants.ADD_NEW_CATEGORY_SUCCESS:\n      const category = action.payload.category;\n      const updatedCategories = buildNewCategories(category.parentId, state.categories, category);\n      console.log(updatedCategories);\n      state = _objectSpread(_objectSpread({}, state), {}, {\n        categories: updatedCategories,\n        loading: false\n      });\n      break;\n\n    case categoryConstants.ADD_NEW_CATEGORY_FAILURE:\n      state = _objectSpread({}, initState);\n      break;\n  }\n\n  return state;\n});","map":{"version":3,"sources":["C:/Users/besni/Desktop/hax-frontend/src/redux/reducers/categoriesReducer.js"],"names":["categoryConstants","initState","categories","loading","error","buildNewCategories","parentId","category","myCategories","undefined","_id","name","slug","children","cat","push","state","action","type","GET_CATEGORIES_SUCCESS","payload","ADD_NEW_CATEGORY_REQUEST","ADD_NEW_CATEGORY_SUCCESS","updatedCategories","console","log","ADD_NEW_CATEGORY_FAILURE"],"mappings":";;;;;;AAAA,SAASA,iBAAT,QAAkC,sBAAlC;AAEA,MAAMC,SAAS,GAAG;AACdC,EAAAA,UAAU,EAAE,EADE;AAEdC,EAAAA,OAAO,EAAE,KAFK;AAGdC,EAAAA,KAAK,EAAE;AAHO,CAAlB;;AAMA,MAAMC,kBAAkB,GAAG,CAACC,QAAD,EAAWJ,UAAX,EAAuBK,QAAvB,KAAqC;AAC5D,MAAIC,YAAY,GAAG,EAAnB;;AAEA,MAAGF,QAAQ,IAAIG,SAAf,EAAyB;AACrB,WAAO,CACH,GAAGP,UADA,EAEH;AACIQ,MAAAA,GAAG,EAAEH,QAAQ,CAACG,GADlB;AAEIC,MAAAA,IAAI,EAAEJ,QAAQ,CAACI,IAFnB;AAGIC,MAAAA,IAAI,EAAEL,QAAQ,CAACK,IAHnB;AAIIC,MAAAA,QAAQ,EAAE;AAJd,KAFG,CAAP;AASH;;AAED,OAAI,IAAIC,GAAR,IAAeZ,UAAf,EAA0B;AAEtB,QAAGY,GAAG,CAACJ,GAAJ,IAAWJ,QAAd,EAAuB;AACnBE,MAAAA,YAAY,CAACO,IAAb,iCACOD,GADP;AAEID,QAAAA,QAAQ,EAAEC,GAAG,CAACD,QAAJ,GAAeR,kBAAkB,CAACC,QAAD,EAAW,CAAC,GAAGQ,GAAG,CAACD,QAAR,EAAkB;AACpEH,UAAAA,GAAG,EAAEH,QAAQ,CAACG,GADsD;AAEpEC,UAAAA,IAAI,EAAEJ,QAAQ,CAACI,IAFqD;AAGpEC,UAAAA,IAAI,EAAEL,QAAQ,CAACK,IAHqD;AAIpEN,UAAAA,QAAQ,EAAEC,QAAQ,CAACD,QAJiD;AAKpEO,UAAAA,QAAQ,EAAEN,QAAQ,CAACM;AALiD,SAAlB,CAAX,EAMvCN,QANuC,CAAjC,GAMM;AARpB;AAUH,KAXD,MAWM;AACFC,MAAAA,YAAY,CAACO,IAAb,iCACOD,GADP;AAEID,QAAAA,QAAQ,EAAEC,GAAG,CAACD,QAAJ,GAAeR,kBAAkB,CAACC,QAAD,EAAWQ,GAAG,CAACD,QAAf,EAAyBN,QAAzB,CAAjC,GAAsE;AAFpF;AAIH;AAEJ;;AAED,SAAOC,YAAP;AACH,CAtCD;;AAwCA,gBAAe,CAACQ,KAAK,GAAGf,SAAT,EAAoBgB,MAApB,KAA+B;AAC1C,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKlB,iBAAiB,CAACmB,sBAAvB;AACIH,MAAAA,KAAK,mCACEA,KADF;AAEDd,QAAAA,UAAU,EAAEe,MAAM,CAACG,OAAP,CAAelB;AAF1B,QAAL;AAIA;;AACJ,SAAKF,iBAAiB,CAACqB,wBAAvB;AACIL,MAAAA,KAAK,mCACEA,KADF;AAEDb,QAAAA,OAAO,EAAE;AAFR,QAAL;AAIA;;AACJ,SAAKH,iBAAiB,CAACsB,wBAAvB;AACI,YAAMf,QAAQ,GAAGU,MAAM,CAACG,OAAP,CAAeb,QAAhC;AACA,YAAMgB,iBAAiB,GAAGlB,kBAAkB,CAACE,QAAQ,CAACD,QAAV,EAAoBU,KAAK,CAACd,UAA1B,EAAsCK,QAAtC,CAA5C;AACAiB,MAAAA,OAAO,CAACC,GAAR,CAAYF,iBAAZ;AACAP,MAAAA,KAAK,mCACEA,KADF;AAEDd,QAAAA,UAAU,EAAEqB,iBAFX;AAGDpB,QAAAA,OAAO,EAAE;AAHR,QAAL;AAKA;;AACJ,SAAKH,iBAAiB,CAAC0B,wBAAvB;AACIV,MAAAA,KAAK,qBACEf,SADF,CAAL;AAGA;AA3BR;;AA6BA,SAAOe,KAAP;AACH,CA/BD","sourcesContent":["import { categoryConstants } from \"../actions/constants\"\r\n\r\nconst initState = { \r\n    categories: [],\r\n    loading: false,\r\n    error: null\r\n}\r\n\r\nconst buildNewCategories = (parentId, categories, category ) => {\r\n    let myCategories = []\r\n\r\n    if(parentId == undefined){\r\n        return [\r\n            ...categories,\r\n            {\r\n                _id: category._id,\r\n                name: category.name,\r\n                slug: category.slug,\r\n                children: []\r\n            }\r\n        ]\r\n    }\r\n\r\n    for(let cat of categories){\r\n\r\n        if(cat._id == parentId){\r\n            myCategories.push({\r\n                ...cat,\r\n                children: cat.children ? buildNewCategories(parentId, [...cat.children, {\r\n                    _id: category._id,\r\n                    name: category.name,\r\n                    slug: category.slug,\r\n                    parentId: category.parentId,\r\n                    children: category.children\r\n                }], category) : []\r\n            })\r\n        }else {\r\n            myCategories.push({\r\n                ...cat,\r\n                children: cat.children ? buildNewCategories(parentId, cat.children, category) : []\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    return myCategories\r\n}\r\n\r\nexport default (state = initState, action) => {\r\n    switch(action.type){\r\n        case categoryConstants.GET_CATEGORIES_SUCCESS:\r\n            state = {\r\n                ...state,\r\n                categories: action.payload.categories\r\n            }\r\n            break\r\n        case categoryConstants.ADD_NEW_CATEGORY_REQUEST:\r\n            state = {\r\n                ...state,\r\n                loading: true\r\n            }\r\n            break\r\n        case categoryConstants.ADD_NEW_CATEGORY_SUCCESS:\r\n            const category = action.payload.category\r\n            const updatedCategories = buildNewCategories(category.parentId, state.categories, category)\r\n            console.log(updatedCategories)\r\n            state = {\r\n                ...state,\r\n                categories: updatedCategories,\r\n                loading: false\r\n            }\r\n            break\r\n        case categoryConstants.ADD_NEW_CATEGORY_FAILURE:\r\n            state = {\r\n                ...initState\r\n            }\r\n            break\r\n    }\r\n    return state\r\n}"]},"metadata":{},"sourceType":"module"}