{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { categoryConstants } from \"../actions/constants\";\nconst initState = {\n  categories: [],\n  loading: false,\n  error: null\n};\nexport default ((state = initState, action) => {\n  switch (action.type) {\n    case categoryConstants.GET_CATEGORIES_SUCCESS:\n      state = _objectSpread(_objectSpread({}, state), {}, {\n        categories: action.payload.categories\n      });\n      break;\n\n    case categoryConstants.ADD_NEW_CATEGORY_REQUEST:\n      state = _objectSpread(_objectSpread({}, state), {}, {\n        loading: true\n      });\n      break;\n\n    case categoryConstants.ADD_NEW_CATEGORY_SUCCESS:\n      state = _objectSpread(_objectSpread({}, state), {}, {\n        loading: false\n      });\n      break;\n\n    case categoryConstants.ADD_NEW_CATEGORY_FAILURE:\n      state = _objectSpread({}, initState);\n      break;\n  }\n\n  return state;\n});","map":{"version":3,"sources":["C:/Users/besni/Desktop/hax-frontend/src/redux/reducers/categoriesReducer.js"],"names":["categoryConstants","initState","categories","loading","error","state","action","type","GET_CATEGORIES_SUCCESS","payload","ADD_NEW_CATEGORY_REQUEST","ADD_NEW_CATEGORY_SUCCESS","ADD_NEW_CATEGORY_FAILURE"],"mappings":";;;;;;AAAA,SAASA,iBAAT,QAAkC,sBAAlC;AAEA,MAAMC,SAAS,GAAG;AACdC,EAAAA,UAAU,EAAE,EADE;AAEdC,EAAAA,OAAO,EAAE,KAFK;AAGdC,EAAAA,KAAK,EAAE;AAHO,CAAlB;AAMA,gBAAe,CAACC,KAAK,GAAGJ,SAAT,EAAoBK,MAApB,KAA+B;AAC1C,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKP,iBAAiB,CAACQ,sBAAvB;AACIH,MAAAA,KAAK,mCACEA,KADF;AAEDH,QAAAA,UAAU,EAAEI,MAAM,CAACG,OAAP,CAAeP;AAF1B,QAAL;AAIA;;AACJ,SAAKF,iBAAiB,CAACU,wBAAvB;AACIL,MAAAA,KAAK,mCACEA,KADF;AAEDF,QAAAA,OAAO,EAAE;AAFR,QAAL;AAIA;;AACJ,SAAKH,iBAAiB,CAACW,wBAAvB;AACIN,MAAAA,KAAK,mCACEA,KADF;AAEDF,QAAAA,OAAO,EAAE;AAFR,QAAL;AAIA;;AACJ,SAAKH,iBAAiB,CAACY,wBAAvB;AACIP,MAAAA,KAAK,qBACEJ,SADF,CAAL;AAGA;AAvBR;;AAyBA,SAAOI,KAAP;AACH,CA3BD","sourcesContent":["import { categoryConstants } from \"../actions/constants\"\r\n\r\nconst initState = { \r\n    categories: [],\r\n    loading: false,\r\n    error: null\r\n}\r\n\r\nexport default (state = initState, action) => {\r\n    switch(action.type){\r\n        case categoryConstants.GET_CATEGORIES_SUCCESS:\r\n            state = {\r\n                ...state,\r\n                categories: action.payload.categories\r\n            }\r\n            break\r\n        case categoryConstants.ADD_NEW_CATEGORY_REQUEST:\r\n            state = {\r\n                ...state,\r\n                loading: true\r\n            }\r\n            break\r\n        case categoryConstants.ADD_NEW_CATEGORY_SUCCESS:\r\n            state = {\r\n                ...state,\r\n                loading: false\r\n            }\r\n            break\r\n        case categoryConstants.ADD_NEW_CATEGORY_FAILURE:\r\n            state = {\r\n                ...initState\r\n            }\r\n            break\r\n    }\r\n    return state\r\n}"]},"metadata":{},"sourceType":"module"}