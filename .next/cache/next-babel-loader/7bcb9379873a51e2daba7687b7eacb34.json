{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { categoryConstants } from \"../actions/constants\";\nconst initState = {\n  categories: [],\n  loading: false,\n  error: null\n};\n\nconst buildNewCategories = (categories, category) => {\n  let myCategories = [];\n\n  for (let cat of categories) {\n    myCategories.push(_objectSpread(_objectSpread({}, cat), {}, {\n      children: cat.children && cat.children.length > 0 ? buildNewCategories(cat.children, category) : []\n    }));\n  }\n\n  return myCategories;\n};\n\nexport default ((state = initState, action) => {\n  console.log(action);\n\n  switch (action.type) {\n    case categoryConstants.GET_CATEGORIES_SUCCESS:\n      state = _objectSpread(_objectSpread({}, state), {}, {\n        categories: action.payload.categories\n      });\n      break;\n\n    case categoryConstants.ADD_NEW_CATEGORY_REQUEST:\n      state = _objectSpread(_objectSpread({}, state), {}, {\n        loading: true\n      });\n      break;\n\n    case categoryConstants.ADD_NEW_CATEGORY_SUCCESS:\n      const updatedCategories = buildNewCategories(state.categories, action.payload.category);\n      console.log(updatedCategories);\n      state = _objectSpread(_objectSpread({}, state), {}, {\n        loading: false\n      });\n      break;\n\n    case categoryConstants.ADD_NEW_CATEGORY_FAILURE:\n      state = _objectSpread({}, initState);\n      break;\n  }\n\n  return state;\n});","map":{"version":3,"sources":["C:/Users/besni/Desktop/hax-frontend/src/redux/reducers/categoriesReducer.js"],"names":["categoryConstants","initState","categories","loading","error","buildNewCategories","category","myCategories","cat","push","children","length","state","action","console","log","type","GET_CATEGORIES_SUCCESS","payload","ADD_NEW_CATEGORY_REQUEST","ADD_NEW_CATEGORY_SUCCESS","updatedCategories","ADD_NEW_CATEGORY_FAILURE"],"mappings":";;;;;;AAAA,SAASA,iBAAT,QAAkC,sBAAlC;AAEA,MAAMC,SAAS,GAAG;AACdC,EAAAA,UAAU,EAAE,EADE;AAEdC,EAAAA,OAAO,EAAE,KAFK;AAGdC,EAAAA,KAAK,EAAE;AAHO,CAAlB;;AAMA,MAAMC,kBAAkB,GAAG,CAACH,UAAD,EAAaI,QAAb,KAA2B;AAClD,MAAIC,YAAY,GAAG,EAAnB;;AAEA,OAAI,IAAIC,GAAR,IAAeN,UAAf,EAA0B;AACtBK,IAAAA,YAAY,CAACE,IAAb,iCACOD,GADP;AAEIE,MAAAA,QAAQ,EAAEF,GAAG,CAACE,QAAJ,IAAgBF,GAAG,CAACE,QAAJ,CAAaC,MAAb,GAAsB,CAAtC,GAA0CN,kBAAkB,CAACG,GAAG,CAACE,QAAL,EAAeJ,QAAf,CAA5D,GAAuF;AAFrG;AAIH;;AAED,SAAOC,YAAP;AACH,CAXD;;AAaA,gBAAe,CAACK,KAAK,GAAGX,SAAT,EAAoBY,MAApB,KAA+B;AAC1CC,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;;AACA,UAAOA,MAAM,CAACG,IAAd;AACI,SAAKhB,iBAAiB,CAACiB,sBAAvB;AACIL,MAAAA,KAAK,mCACEA,KADF;AAEDV,QAAAA,UAAU,EAAEW,MAAM,CAACK,OAAP,CAAehB;AAF1B,QAAL;AAIA;;AACJ,SAAKF,iBAAiB,CAACmB,wBAAvB;AACIP,MAAAA,KAAK,mCACEA,KADF;AAEDT,QAAAA,OAAO,EAAE;AAFR,QAAL;AAIA;;AACJ,SAAKH,iBAAiB,CAACoB,wBAAvB;AACI,YAAMC,iBAAiB,GAAGhB,kBAAkB,CAACO,KAAK,CAACV,UAAP,EAAmBW,MAAM,CAACK,OAAP,CAAeZ,QAAlC,CAA5C;AACAQ,MAAAA,OAAO,CAACC,GAAR,CAAYM,iBAAZ;AACAT,MAAAA,KAAK,mCACEA,KADF;AAEDT,QAAAA,OAAO,EAAE;AAFR,QAAL;AAIA;;AACJ,SAAKH,iBAAiB,CAACsB,wBAAvB;AACIV,MAAAA,KAAK,qBACEX,SADF,CAAL;AAGA;AAzBR;;AA2BA,SAAOW,KAAP;AACH,CA9BD","sourcesContent":["import { categoryConstants } from \"../actions/constants\"\r\n\r\nconst initState = { \r\n    categories: [],\r\n    loading: false,\r\n    error: null\r\n}\r\n\r\nconst buildNewCategories = (categories, category ) => {\r\n    let myCategories = []\r\n\r\n    for(let cat of categories){\r\n        myCategories.push({\r\n            ...cat,\r\n            children: cat.children && cat.children.length > 0 ? buildNewCategories(cat.children, category) : []\r\n        })\r\n    }\r\n\r\n    return myCategories\r\n}\r\n\r\nexport default (state = initState, action) => {\r\n    console.log(action)\r\n    switch(action.type){\r\n        case categoryConstants.GET_CATEGORIES_SUCCESS:\r\n            state = {\r\n                ...state,\r\n                categories: action.payload.categories\r\n            }\r\n            break\r\n        case categoryConstants.ADD_NEW_CATEGORY_REQUEST:\r\n            state = {\r\n                ...state,\r\n                loading: true\r\n            }\r\n            break\r\n        case categoryConstants.ADD_NEW_CATEGORY_SUCCESS:\r\n            const updatedCategories = buildNewCategories(state.categories, action.payload.category)\r\n            console.log(updatedCategories)\r\n            state = {\r\n                ...state,\r\n                loading: false\r\n            }\r\n            break\r\n        case categoryConstants.ADD_NEW_CATEGORY_FAILURE:\r\n            state = {\r\n                ...initState\r\n            }\r\n            break\r\n    }\r\n    return state\r\n}"]},"metadata":{},"sourceType":"module"}