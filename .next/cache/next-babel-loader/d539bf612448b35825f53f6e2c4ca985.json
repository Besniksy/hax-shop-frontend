{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport axiosInstance from \"../../helpers/axios\";\nimport { categoryConstants } from \"./constants\";\nexport var getAllCategories = function getAllCategories() {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n      var res, categoryList;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return axiosInstance.get('/category/getcategories');\n\n            case 2:\n              res = _context.sent;\n              console.log(res);\n              dispatch({\n                type: categoryConstants.GET_CATEGORIES_REQUEST\n              });\n\n              if (res.status === 200) {\n                categoryList = res.data.categoryList;\n                dispatch({\n                  type: categoryConstants.GET_CATEGORIES_SUCCESS,\n                  payload: {\n                    categories: categoryList\n                  }\n                });\n              } else {\n                dispatch({\n                  type: categoryConstants.GET_CATEGORIES_FAILURE,\n                  payload: {\n                    error: res.data.error\n                  }\n                });\n              }\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\nexport var addCategory = function addCategory(form) {\n  return /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch) {\n      var res;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              dispatch({\n                type: categoryConstants.ADD_NEW_CATEGORY_REQUEST\n              });\n              _context2.next = 3;\n              return axiosInstance.post('/category/create', form);\n\n            case 3:\n              res = _context2.sent;\n\n              if (res.status === 201) {\n                dispatch({\n                  type: categoryConstants.ADD_NEW_CATEGORY_SUCCESS,\n                  payload: res.data.category\n                });\n              } else {\n                dispatch({\n                  type: categoryConstants.GET_CATEGORIES_FAILURE,\n                  payload: res.data.error\n                });\n              }\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n};","map":{"version":3,"sources":["C:/Users/besni/Desktop/hax-frontend/src/redux/actions/categoriesActions.js"],"names":["axiosInstance","categoryConstants","getAllCategories","dispatch","get","res","console","log","type","GET_CATEGORIES_REQUEST","status","categoryList","data","GET_CATEGORIES_SUCCESS","payload","categories","GET_CATEGORIES_FAILURE","error","addCategory","form","ADD_NEW_CATEGORY_REQUEST","post","ADD_NEW_CATEGORY_SUCCESS","category"],"mappings":";;AAAA,OAAOA,aAAP,MAA0B,qBAA1B;AACA,SAASC,iBAAT,QAAkC,aAAlC;AAEA,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAM;AAClC;AAAA,wEAAO,iBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACeH,aAAa,CAACI,GAAd,CAAkB,yBAAlB,CADf;;AAAA;AACGC,cAAAA,GADH;AAEHC,cAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AAEAF,cAAAA,QAAQ,CAAC;AAACK,gBAAAA,IAAI,EAAEP,iBAAiB,CAACQ;AAAzB,eAAD,CAAR;;AACA,kBAAGJ,GAAG,CAACK,MAAJ,KAAe,GAAlB,EAAsB;AACVC,gBAAAA,YADU,GACON,GAAG,CAACO,IADX,CACVD,YADU;AAElBR,gBAAAA,QAAQ,CAAC;AACLK,kBAAAA,IAAI,EAAEP,iBAAiB,CAACY,sBADnB;AAELC,kBAAAA,OAAO,EAAE;AAACC,oBAAAA,UAAU,EAAEJ;AAAb;AAFJ,iBAAD,CAAR;AAIH,eAND,MAMK;AACDR,gBAAAA,QAAQ,CAAC;AACLK,kBAAAA,IAAI,EAAEP,iBAAiB,CAACe,sBADnB;AAELF,kBAAAA,OAAO,EAAE;AAACG,oBAAAA,KAAK,EAAEZ,GAAG,CAACO,IAAJ,CAASK;AAAjB;AAFJ,iBAAD,CAAR;AAIH;;AAhBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;;AAAA;AAAA;AAAA;AAAA;AAkBH,CAnBM;AAqBP,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,IAAD,EAAU;AACjC;AAAA,yEAAO,kBAAMhB,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACHA,cAAAA,QAAQ,CAAC;AAACK,gBAAAA,IAAI,EAAEP,iBAAiB,CAACmB;AAAzB,eAAD,CAAR;AADG;AAAA,qBAEepB,aAAa,CAACqB,IAAd,CAAmB,kBAAnB,EAAuCF,IAAvC,CAFf;;AAAA;AAEGd,cAAAA,GAFH;;AAGH,kBAAGA,GAAG,CAACK,MAAJ,KAAe,GAAlB,EAAsB;AAClBP,gBAAAA,QAAQ,CAAC;AACLK,kBAAAA,IAAI,EAAEP,iBAAiB,CAACqB,wBADnB;AAELR,kBAAAA,OAAO,EAAET,GAAG,CAACO,IAAJ,CAASW;AAFb,iBAAD,CAAR;AAIH,eALD,MAKK;AACDpB,gBAAAA,QAAQ,CAAC;AACLK,kBAAAA,IAAI,EAAEP,iBAAiB,CAACe,sBADnB;AAELF,kBAAAA,OAAO,EAAET,GAAG,CAACO,IAAJ,CAASK;AAFb,iBAAD,CAAR;AAIH;;AAbE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;;AAAA;AAAA;AAAA;AAAA;AAeH,CAhBM","sourcesContent":["import axiosInstance from \"../../helpers/axios\"\r\nimport { categoryConstants } from \"./constants\"\r\n\r\nexport const getAllCategories = () => {\r\n    return async dispatch => {\r\n        const res = await axiosInstance.get('/category/getcategories')\r\n        console.log(res)\r\n\r\n        dispatch({type: categoryConstants.GET_CATEGORIES_REQUEST})\r\n        if(res.status === 200){\r\n            const { categoryList } = res.data\r\n            dispatch({\r\n                type: categoryConstants.GET_CATEGORIES_SUCCESS,\r\n                payload: {categories: categoryList}\r\n            })\r\n        }else{\r\n            dispatch({\r\n                type: categoryConstants.GET_CATEGORIES_FAILURE,\r\n                payload: {error: res.data.error}\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport const addCategory = (form) => {\r\n    return async dispatch => {\r\n        dispatch({type: categoryConstants.ADD_NEW_CATEGORY_REQUEST})\r\n        const res = await axiosInstance.post('/category/create', form)\r\n        if(res.status === 201){\r\n            dispatch({\r\n                type: categoryConstants.ADD_NEW_CATEGORY_SUCCESS,\r\n                payload: res.data.category\r\n            })\r\n        }else{\r\n            dispatch({\r\n                type: categoryConstants.GET_CATEGORIES_FAILURE,\r\n                payload: res.data.error\r\n            })\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}